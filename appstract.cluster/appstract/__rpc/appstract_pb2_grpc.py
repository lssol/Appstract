# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import appstract.__rpc.appstract_pb2 as appstract__pb2


class ClusteringStub(object):
    """----------------------------------------------------------------------------
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartClustering = channel.unary_stream(
                '/proto_appstract.Clustering/StartClustering',
                request_serializer=appstract__pb2.Empty.SerializeToString,
                response_deserializer=appstract__pb2.Progress.FromString,
                )


class ClusteringServicer(object):
    """----------------------------------------------------------------------------
    """

    def StartClustering(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClusteringServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartClustering': grpc.unary_stream_rpc_method_handler(
                    servicer.StartClustering,
                    request_deserializer=appstract__pb2.Empty.FromString,
                    response_serializer=appstract__pb2.Progress.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto_appstract.Clustering', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Clustering(object):
    """----------------------------------------------------------------------------
    """

    @staticmethod
    def StartClustering(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/proto_appstract.Clustering/StartClustering',
            appstract__pb2.Empty.SerializeToString,
            appstract__pb2.Progress.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class RobotStub(object):
    """----------------------------------------------------------------------------
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Explore = channel.unary_stream(
                '/proto_appstract.Robot/Explore',
                request_serializer=appstract__pb2.ExploreRequest.SerializeToString,
                response_deserializer=appstract__pb2.ExploreReply.FromString,
                )


class RobotServicer(object):
    """----------------------------------------------------------------------------
    """

    def Explore(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RobotServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Explore': grpc.unary_stream_rpc_method_handler(
                    servicer.Explore,
                    request_deserializer=appstract__pb2.ExploreRequest.FromString,
                    response_serializer=appstract__pb2.ExploreReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto_appstract.Robot', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Robot(object):
    """----------------------------------------------------------------------------
    """

    @staticmethod
    def Explore(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/proto_appstract.Robot/Explore',
            appstract__pb2.ExploreRequest.SerializeToString,
            appstract__pb2.ExploreReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
