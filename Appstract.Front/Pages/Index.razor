@page "/"
@using Appstract.Front.Entities
@using Appstract.Front.Services
@using System.Linq
@using System.Threading
@using Appstract.Front.Repositories
@using FSharpPlus
@using FSharpPlus.Control
@using Robot
@using Task = System.Threading.Tasks.Task
@inject ApplicationService ApplicationService
@inject RpcChannel RpcChannel
@inject ApplicationRepository ApplicationRepository

<h1>Applications</h1>

@if (applications == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (applications.Any())
{
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>Domain</th>
            <th>Pages</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var application in applications)
        {
            <tr>
                <td>@application.Name</td>
                <td>@application.Domain</td>
                <td>
                    @if (exploration.ContainsKey(application.Id))
                    {
                        <strong>@exploration[application.Id]</strong>
                    }
                    else if (application.Pages.Any())
                    {
                        <span>@application.Pages.Count()</span>
                    }
                    else
                    {
                        <a href="#" @onclick="async () => await Explore(application.Id)">Explore</a>
                    }
                </td>
            </tr>
        }
        </tbody>
    </table>
}

<EditForm class="form-inline" Model="@_application" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <InputText placeholder="Name" class="form-control" id="name" @bind-Value="_application.Name"/>
    <InputText placeholder="Domain" class="form-control" id="domain" @bind-Value="_application.Domain"/>

    <button class="btn-primary btn" type="submit">Add an application</button>
</EditForm>


@code {
    private List<Application> applications;
    private Application _application = new();

    private Dictionary<string, int> exploration = new();

    protected override async Task OnInitializedAsync()
    {
        applications = await ApplicationService.GetApplications();
    }

    private void HandleValidSubmit()
    {
        var result = ApplicationService.CreateApplication(_application);
        _application = new();
        applications.Add(result);
    }

    private async Task Explore(string id)
    {
        var application = applications.Find(a => a.Id == id);
        exploration.Add(id, 0);
        var stream = RpcChannel.Client.Explore(new ExploreRequest {Domain = application.Domain}).ResponseStream;
        while (await stream.MoveNext(CancellationToken.None))
        {
            var res = stream.Current;
            if (res.Error)
            {
                Console.WriteLine($"Error occured when exploring {res.Url}");
                continue;
            }

            Console.WriteLine($"Explored {res.Url}");
            await ApplicationRepository.CreatePage(new Page
            {
                Content = res.Content,
                Domain = res.Domain,
                Origin = res.Origin,
                Url = res.Url,
                ApplicationId = id,
                NbLinks = res.NbLinks,
                NbNodes = res.NbNodes
            });
            exploration[id]++;
            StateHasChanged();
        }
    }

}