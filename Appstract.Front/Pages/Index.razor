@page "/"
@using Appstract.Front.Entities
@using Appstract.Front.Services
@using System.Linq
@using Appstract.Front.Repositories
@using Task = System.Threading.Tasks.Task
@using System.Collections.Concurrent

@implements IDisposable

@inject ApplicationService _applicationService
@inject ApplicationRepository _applicationRepository
@inject ExplorationService _explorationService

<h1>Applications</h1>

@if (applications == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (applications.Any())
{
    <table class="table">
        <thead>
        <tr>
            <th></th>
            <th>Domain</th>
            <th>Pages</th>
            <th>Exploration</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var app in applications)
        {
            <tr>
                <td><span class="oi oi-trash" @onclick="() => RemoveApplication(app.Id)"></span></td>
                <td>@app.Domain</td>
                <td><span>@pagesAlreadyExplored.GetValueOrDefault(app.Id, 0)</span></td>
                <td>
                    @if (exploration.ContainsKey(app.Id))
                    {
                        <strong>@exploration[app.Id]</strong>
                    }
                    else
                    {
                        <a href="#" @onclick="async () => await Explore(app.Id)">Explore</a>
                    }
                </td>
            </tr>
        }
        </tbody>
    </table>
}

<EditForm class="form-inline" Model="@application" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <InputText placeholder="Domain" class="form-control" id="domain" @bind-Value="application.Domain"/>

    <button class="btn-primary btn" type="submit">Add an application</button>
</EditForm>


@code {
    private List<Application> applications;
    private Application application = new();

    private ConcurrentDictionary<string, int> exploration = new();
    private Dictionary<string, int> pagesAlreadyExplored = new();

    protected override async Task OnInitializedAsync()
    {
        var model = await _applicationService.GetApplications();
        pagesAlreadyExplored = model.PageNumbers;
        applications = model.Applications;
        exploration = _explorationService.exploration;
        _explorationService.OnChange += OnChange;
    }

    private void HandleValidSubmit()
    {
        var result = _applicationService.CreateApplication(application);
        application = new();
        applications.Add(result);
    }

    private async void RemoveApplication(string id)
    {
        await _applicationRepository.RemoveApplication(id);
        applications = applications.Where(a => a.Id != id).ToList();
        StateHasChanged();
    }

    private async Task Explore(string id)
    {
        var app = applications.FirstOrDefault(a => a.Id == id);
        await _explorationService.Explore(app);
    }
    
    private async void OnChange()
    {
        await InvokeAsync(() => { StateHasChanged(); });
    } 
    
    public void Dispose()
    {
        _explorationService.OnChange -= OnChange;
    }
}